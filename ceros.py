# -*- coding: utf-8 -*-
"""Ceros

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1C4mGktLoYyrr7IXHb5FXwiaWs_B6gy9H
"""

import numpy as np
import pandas as pd
import sympy as sp


#Biseccion
def Biseccion(f,a,b,tol):
  if f(a)*f(b) > 0:
    print("la funcion no cumple el teorema en el intervalo dado")
    return
  else:
    print("Buscando.....")
    while (abs(b-a)>tol):
      p = (a+b)/2
      if(f(a)*f(p)>0):
        a=p
      else:
        b=p
    return p


#Falsa posicion
def Falsa_posicion(f,a,b,tol):
  if f(a)*f(b) > 0:
    print("la funcion no cumple el teorema en el intervalo dado")
    return
  else:
    print("Buscando.....")
    i=0
    p = b-f(b)*(a-b)/(f(a)-f(b))
    while (abs(b-a)>tol):
      p = b-f(b)*(a-b)/(f(a)-f(b))
      i+=1
      if(f(a)*f(p)>0):
        a=p
      else:
        b=p
      print(abs(b-a), abs(f(p)))
    return p,i


#Newton
#primero hay que calcular la primera derivada
x =sp.symbols("x")
f_nor = x**2 - 6
f_deri= sp.diff(f_nor,x)

def newton(f,x_0, exactitud):
  error = 100
  while error > exactitud:
    x_nueva = x_0 - (f(x_0) / f_deri.evalf(subs={x: x_0}))  # Evaluamos la derivada
    error = abs(x_nueva - x_0)  # Calculamos el error absoluto
    x_0 = x_nueva
  return x_nueva


#Secante
def secante(f,x0,x1,exactitud):
  error = 1
  while error > exactitud:
    x2= x1 - f(x1) * (x0 - x1) / (f(x0) - f(x1))
    error = abs(x2 - x1)
    x0 = x1
    x1 = x2
  return x2